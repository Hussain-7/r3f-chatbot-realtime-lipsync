/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";

import * as THREE from "three";
import { useChat } from "../hooks/useChat";

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const correspondingForCC4 = {
  A: "B_M_P",
  B: "EE",
  C: "AE",
  D: "Ah",
  E: "Er",
  F: "W_OO",
  G: "F_V",
  H: "T_L_D_N",
  X: "None",
};
let setupMode = false;

export function Cc4AvatarTemplate(props) {
  const group = useRef();
  const { nodes, materials, scene } = useGLTF("/models/cc4char.glb");
  const { message, onMessagePlayed, chat, setLipSyncMode } = useChat();
  const [lipsync, setLipsync] = useState();

  // ** Handle State on Response from Server
  useEffect(() => {
    console.log(message);
    if (!message) return;
    setFacialExpression(message.facialExpression);
    setLipsync(message.lipsync);
    const audio = new Audio("data:audio/mp3;base64," + message.audio);
    audio.play();
    setAudio(audio);
    audio.onended = onMessagePlayed;
  }, [message]);

  // ** Handle Avatar Animations End

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch (e) {}
        }
      }
    });
  };

  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const [audio, setAudio] = useState();

  useFrame(() => {
    // LIPSYNC;
    if (setupMode) {
      return;
    }
    const appliedMorphTargets = [];
    if (message && lipsync) {
      const currentAudioTime = audio.currentTime;
      for (let i = 0; i < lipsync.mouthCues.length; i++) {
        const mouthCue = lipsync.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          appliedMorphTargets.push(correspondingForCC4[mouthCue.value]);
          lerpMorphTarget(correspondingForCC4[mouthCue.value], 1.5, 0.6);
          // lerpMorphTarget("Nose_Flank_Raise_L", 1.5, 0.6);
          break;
        }
      }
    }
    Object.values(correspondingForCC4).forEach((value) => {
      if (appliedMorphTargets.includes(value)) {
        return;
      }
      lerpMorphTarget(value, 0, 0.5);
      // lerpMorphTarget("Nose_Flank_Raise_L", 0, 0.6);
    });
  });

  // ** UI Helper Leva
  const { lipSyncMode } = useControls("FacialExpressions", {
    lipSyncMode: false,
    // chat: button(() => chat()),
    // winkLeft: button(() => {
    //   setWinkLeft(true);
    //   setTimeout(() => setWinkLeft(false), 300);
    // }),
    // winkRight: button(() => {
    //   setWinkRight(true);
    //   setTimeout(() => setWinkRight(false), 300);
    // }),
    // facialExpression: {
    //   options: Object.keys(facialExpressions),
    //   onChange: (value) => setFacialExpression(value),
    // },
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      const emotionValues = {};
      Object.keys(nodes.CC_Base_Body_1.morphTargetDictionary).forEach((key) => {
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        const value =
          nodes.CC_Base_Body_1.morphTargetInfluences[
            nodes.CC_Base_Body_1.morphTargetDictionary[key]
          ];
        if (value > 0.01) {
          emotionValues[key] = value;
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  useEffect(() => {
    setLipSyncMode(lipSyncMode);
  }, [lipSyncMode]);

  const [, set] = useControls("MorphTarget", () =>
    Object.assign(
      {},
      ...Object.keys(nodes.CC_Base_Body_1.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: nodes.CC_Base_Body_1.morphTargetInfluences[
              nodes.CC_Base_Body_1.morphTargetDictionary[key]
            ],
            max: 2,
            onChange: (val) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    )
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" scale={0.01}>
          <group name="CC_Base_Body">
            <skinnedMesh
              name="CC_Base_Body_1"
              geometry={nodes.CC_Base_Body_1.geometry}
              material={materials.Std_Skin_Head}
              skeleton={nodes.CC_Base_Body_1.skeleton}
              morphTargetDictionary={nodes.CC_Base_Body_1.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Body_1.morphTargetInfluences}
            />
            <skinnedMesh
              name="CC_Base_Body_2"
              geometry={nodes.CC_Base_Body_2.geometry}
              material={materials.Std_Skin_Body}
              skeleton={nodes.CC_Base_Body_2.skeleton}
              morphTargetDictionary={nodes.CC_Base_Body_2.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Body_2.morphTargetInfluences}
            />
            <skinnedMesh
              name="CC_Base_Body_3"
              geometry={nodes.CC_Base_Body_3.geometry}
              material={materials.Std_Skin_Arm}
              skeleton={nodes.CC_Base_Body_3.skeleton}
              morphTargetDictionary={nodes.CC_Base_Body_3.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Body_3.morphTargetInfluences}
            />
            <skinnedMesh
              name="CC_Base_Body_4"
              geometry={nodes.CC_Base_Body_4.geometry}
              material={materials.Std_Skin_Leg}
              skeleton={nodes.CC_Base_Body_4.skeleton}
              morphTargetDictionary={nodes.CC_Base_Body_4.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Body_4.morphTargetInfluences}
            />
            <skinnedMesh
              name="CC_Base_Body_5"
              geometry={nodes.CC_Base_Body_5.geometry}
              material={materials.Std_Nails}
              skeleton={nodes.CC_Base_Body_5.skeleton}
              morphTargetDictionary={nodes.CC_Base_Body_5.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Body_5.morphTargetInfluences}
            />
            <skinnedMesh
              name="CC_Base_Body_6"
              geometry={nodes.CC_Base_Body_6.geometry}
              material={materials.Std_Eyelash}
              skeleton={nodes.CC_Base_Body_6.skeleton}
              morphTargetDictionary={nodes.CC_Base_Body_6.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Body_6.morphTargetInfluences}
            />
          </group>
          <group name="CC_Base_Eye">
            <skinnedMesh
              name="CC_Base_Eye_1"
              geometry={nodes.CC_Base_Eye_1.geometry}
              material={materials.Std_Eye_R}
              skeleton={nodes.CC_Base_Eye_1.skeleton}
              morphTargetDictionary={nodes.CC_Base_Eye_1.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Eye_1.morphTargetInfluences}
            />
            <skinnedMesh
              name="CC_Base_Eye_2"
              geometry={nodes.CC_Base_Eye_2.geometry}
              material={materials.Std_Cornea_R}
              skeleton={nodes.CC_Base_Eye_2.skeleton}
              morphTargetDictionary={nodes.CC_Base_Eye_2.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Eye_2.morphTargetInfluences}
            />
            <skinnedMesh
              name="CC_Base_Eye_3"
              geometry={nodes.CC_Base_Eye_3.geometry}
              material={materials.Std_Eye_L}
              skeleton={nodes.CC_Base_Eye_3.skeleton}
              morphTargetDictionary={nodes.CC_Base_Eye_3.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Eye_3.morphTargetInfluences}
            />
            <skinnedMesh
              name="CC_Base_Eye_4"
              geometry={nodes.CC_Base_Eye_4.geometry}
              material={materials.Std_Cornea_L}
              skeleton={nodes.CC_Base_Eye_4.skeleton}
              morphTargetDictionary={nodes.CC_Base_Eye_4.morphTargetDictionary}
              morphTargetInfluences={nodes.CC_Base_Eye_4.morphTargetInfluences}
            />
          </group>
          <group name="CC_Base_EyeOcclusion">
            <skinnedMesh
              name="CC_Base_EyeOcclusion_1"
              geometry={nodes.CC_Base_EyeOcclusion_1.geometry}
              material={materials.Std_Eye_Occlusion_R}
              skeleton={nodes.CC_Base_EyeOcclusion_1.skeleton}
              morphTargetDictionary={
                nodes.CC_Base_EyeOcclusion_1.morphTargetDictionary
              }
              morphTargetInfluences={
                nodes.CC_Base_EyeOcclusion_1.morphTargetInfluences
              }
            />
            <skinnedMesh
              name="CC_Base_EyeOcclusion_2"
              geometry={nodes.CC_Base_EyeOcclusion_2.geometry}
              material={materials.Std_Eye_Occlusion_L}
              skeleton={nodes.CC_Base_EyeOcclusion_2.skeleton}
              morphTargetDictionary={
                nodes.CC_Base_EyeOcclusion_2.morphTargetDictionary
              }
              morphTargetInfluences={
                nodes.CC_Base_EyeOcclusion_2.morphTargetInfluences
              }
            />
          </group>
          <group name="CC_Base_TearLine">
            <skinnedMesh
              name="CC_Base_TearLine_1"
              geometry={nodes.CC_Base_TearLine_1.geometry}
              material={materials.Std_Tearline_R}
              skeleton={nodes.CC_Base_TearLine_1.skeleton}
              morphTargetDictionary={
                nodes.CC_Base_TearLine_1.morphTargetDictionary
              }
              morphTargetInfluences={
                nodes.CC_Base_TearLine_1.morphTargetInfluences
              }
            />
            <skinnedMesh
              name="CC_Base_TearLine_2"
              geometry={nodes.CC_Base_TearLine_2.geometry}
              material={materials.Std_Tearline_L}
              skeleton={nodes.CC_Base_TearLine_2.skeleton}
              morphTargetDictionary={
                nodes.CC_Base_TearLine_2.morphTargetDictionary
              }
              morphTargetInfluences={
                nodes.CC_Base_TearLine_2.morphTargetInfluences
              }
            />
          </group>
          <group name="CC_Base_Teeth">
            <skinnedMesh
              name="CC_Base_Teeth_1"
              geometry={nodes.CC_Base_Teeth_1.geometry}
              material={materials.Std_Upper_Teeth}
              skeleton={nodes.CC_Base_Teeth_1.skeleton}
              morphTargetDictionary={
                nodes.CC_Base_Teeth_1.morphTargetDictionary
              }
              morphTargetInfluences={
                nodes.CC_Base_Teeth_1.morphTargetInfluences
              }
            />
            <skinnedMesh
              name="CC_Base_Teeth_2"
              geometry={nodes.CC_Base_Teeth_2.geometry}
              material={materials.Std_Lower_Teeth}
              skeleton={nodes.CC_Base_Teeth_2.skeleton}
              morphTargetDictionary={
                nodes.CC_Base_Teeth_2.morphTargetDictionary
              }
              morphTargetInfluences={
                nodes.CC_Base_Teeth_2.morphTargetInfluences
              }
            />
          </group>
          <skinnedMesh
            name="CC_Base_Tongue"
            geometry={nodes.CC_Base_Tongue.geometry}
            material={materials.Std_Tongue}
            skeleton={nodes.CC_Base_Tongue.skeleton}
            morphTargetDictionary={nodes.CC_Base_Tongue.morphTargetDictionary}
            morphTargetInfluences={nodes.CC_Base_Tongue.morphTargetInfluences}
          />
          <skinnedMesh
            name="Layered_sweater"
            geometry={nodes.Layered_sweater.geometry}
            material={materials.Layered_sweater}
            skeleton={nodes.Layered_sweater.skeleton}
          />
          <group name="Male_Bushy">
            <skinnedMesh
              name="Male_Bushy_1"
              geometry={nodes.Male_Bushy_1.geometry}
              material={materials.Male_Bushy_Transparency}
              skeleton={nodes.Male_Bushy_1.skeleton}
              morphTargetDictionary={nodes.Male_Bushy_1.morphTargetDictionary}
              morphTargetInfluences={nodes.Male_Bushy_1.morphTargetInfluences}
            />
            <skinnedMesh
              name="Male_Bushy_2"
              geometry={nodes.Male_Bushy_2.geometry}
              material={materials.Male_Bushy_Base_Transparency}
              skeleton={nodes.Male_Bushy_2.skeleton}
              morphTargetDictionary={nodes.Male_Bushy_2.morphTargetDictionary}
              morphTargetInfluences={nodes.Male_Bushy_2.morphTargetInfluences}
            />
          </group>
          <skinnedMesh
            name="Slim_Jeans"
            geometry={nodes.Slim_Jeans.geometry}
            material={materials.Slim_Jeans}
            skeleton={nodes.Slim_Jeans.skeleton}
          />
          <primitive object={nodes.CC_Base_BoneRoot} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/cc4char.glb");
